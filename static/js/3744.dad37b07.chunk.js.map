{"version":3,"file":"static/js/3744.dad37b07.chunk.js","mappings":"wJAyHA,UAtHuB,WACrB,OACE,iCACE,wJAIA,0CACe,2CADf,kFAEgD,KAC9C,4CAHF,WAGuC,KACrC,cACEA,KAAK,yCACLC,OAAO,SACPC,IAAI,aAHN,2BAMK,IAVP,yEAaA,iFACA,gFACuD,KACrD,8DAEF,SAAC,KAAD,CAAmBC,SAAS,KAA5B,mXAmBA,4DACA,SAAC,KAAD,CAAmBA,SAAS,KAA5B,ykDAqDA,uDAC4B,qCAD5B,6BAC0E,KACxE,sCAFF,qBAEyC,KACvC,6DAEF,iBAAKC,UAAU,QAAQC,GAAG,WAA1B,WACE,sCACA,2GAGE,0DAHF,mCAKE,0DALF,KAK6C,KAC3C,kDANF,6CAWP,C","sources":["views/docs/Documentations/components/Authentication.js"],"sourcesContent":["import React from \"react\";\r\nimport { SyntaxHighlighter } from \"components/shared\";\r\n\r\nconst Authentication = () => {\r\n  return (\r\n    <>\r\n      <p>\r\n        Mempoverse Admin provides an implementation for JWT authorization that\r\n        allows you to quickly link up your backend services.\r\n      </p>\r\n      <p>\r\n        We are using <code>localStorage</code> & Redux to store tokens info and\r\n        authenticate the user. As we mentioned in our{\" \"}\r\n        <strong>Redux guide</strong>, we use{\" \"}\r\n        <a\r\n          href=\"https://github.com/rt2zz/redux-persist\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          redux-persist\r\n        </a>{\" \"}\r\n        to maintain localStorage synchronize with some of our Redux state.\r\n      </p>\r\n      <p>Let's take a look at the example we have in the demo</p>\r\n      <p>\r\n        We created a series of authentication services under{\" \"}\r\n        <code>src/services/AuthService.js</code>\r\n      </p>\r\n      <SyntaxHighlighter language=\"js\">{`import ApiService from \"./ApiService\"\r\n\r\nexport async function apiSignIn (data) {\r\n    return ApiService.fetchData({\r\n        url: '/sign-in',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\nexport async function apiSignUp (data) {\r\n    return ApiService.fetchData({\r\n        url: '/sign-up',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n...`}</SyntaxHighlighter>\r\n      <p>Sign in implementation example:</p>\r\n      <SyntaxHighlighter language=\"js\">{`import { onSignInSuccess } from 'store/auth/sessionSlice'\r\nimport { setUser } from 'store/auth/userSlice'\r\nimport { apiSignIn } from 'services/AuthService'\r\nimport appConfig from 'configs/app.config'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst SignInForm = props => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst [message, setMessage] = useTimeOutMessage()\r\n\r\n\tconst onSignIn = async (values, setSubmitting) => {\r\n\t\tconst { userName, password } = values\r\n\t\tsetSubmitting(true)\r\n\t\ttry {\r\n\t\t\tconst resp = await apiSignIn({ userName, password })\r\n\t\t\tif (resp.data) {\r\n\t\t\t\tsetSubmitting(false)\r\n\t\t\t\tconst { token } = resp.data\r\n\t\t\t\t// This will set the returning token to redux & localStorage\r\n\t\t\t\tdispatch(onSignInSuccess(token))\r\n\t\t\t\t// You can also set the user info to redux here, if it comes along with your sign in api \r\n\t\t\t\tif(resp.data.user) {\r\n\t\t\t\t\tdispatch(setUser(resp.data.user || { \r\n\t\t\t\t\t\tavatar: '', \r\n\t\t\t\t\t\tuserName: 'Anonymous', \r\n\t\t\t\t\t\tauthority: ['USER'], \r\n\t\t\t\t\t\temail: ''\r\n\t\t\t\t\t}))\r\n\t\t\t\t}\r\n\t\t\t\tnavigate(appConfig.authenticatedEntryPath)\r\n\t\t\t}\r\n\t\t} catch (errors) {\r\n\t\t\tsetMessage(errors?.response?.data?.message || errors.toString())\r\n\t\t\tsetSubmitting(false)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Formik\r\n\t\t\tonSubmit={(values, { setSubmitting }) => {\r\n\t\t\t\tonSignIn(values, setSubmitting)\r\n\t\t\t}}\r\n\t\t\t...\r\n\t\t>\r\n\t\t...\r\n\t)\r\n`}</SyntaxHighlighter>\r\n      <p>\r\n        You can also use composed <code>signIn</code> function propvided by our{\" \"}\r\n        <code>useAuth</code> hooks, located at{\" \"}\r\n        <code>src/utils/hooks/useAuth.js</code>\r\n      </p>\r\n      <div className=\"mt-10\" id=\"overview\">\r\n        <h5>Overview</h5>\r\n        <p>\r\n          Once your backend API was ready integrate, you can config the API\r\n          endpoints at\r\n          <code>src/services/AuthService.js</code> and edit the implementation\r\n          at\r\n          <code>src/views/auth/*/xxxForm.js</code> &{\" \"}\r\n          <code>src/store/auth/*.js</code> based on your application needed.\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n"],"names":["href","target","rel","language","className","id"],"sourceRoot":""}