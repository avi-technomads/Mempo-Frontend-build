"use strict";(self.webpackChunkMempoverse=self.webpackChunkMempoverse||[]).push([[3744],{3744:function(t,e,n){n.r(e);n(72791);var s=n(99965),i=n(80184);e.default=function(){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("p",{children:"Mempoverse Admin provides an implementation for JWT authorization that allows you to quickly link up your backend services."}),(0,i.jsxs)("p",{children:["We are using ",(0,i.jsx)("code",{children:"localStorage"})," & Redux to store tokens info and authenticate the user. As we mentioned in our"," ",(0,i.jsx)("strong",{children:"Redux guide"}),", we use"," ",(0,i.jsx)("a",{href:"https://github.com/rt2zz/redux-persist",target:"_blank",rel:"noreferrer",children:"redux-persist"})," ","to maintain localStorage synchronize with some of our Redux state."]}),(0,i.jsx)("p",{children:"Let's take a look at the example we have in the demo"}),(0,i.jsxs)("p",{children:["We created a series of authentication services under"," ",(0,i.jsx)("code",{children:"src/services/AuthService.js"})]}),(0,i.jsx)(s.d3,{language:"js",children:"import ApiService from \"./ApiService\"\n\nexport async function apiSignIn (data) {\n    return ApiService.fetchData({\n        url: '/sign-in',\n        method: 'post',\n        data\n    })\n}\n\nexport async function apiSignUp (data) {\n    return ApiService.fetchData({\n        url: '/sign-up',\n        method: 'post',\n        data\n    })\n}\n\n..."}),(0,i.jsx)("p",{children:"Sign in implementation example:"}),(0,i.jsx)(s.d3,{language:"js",children:"import { onSignInSuccess } from 'store/auth/sessionSlice'\nimport { setUser } from 'store/auth/userSlice'\nimport { apiSignIn } from 'services/AuthService'\nimport appConfig from 'configs/app.config'\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\nimport { Field, Form, Formik } from 'formik'\nimport { useDispatch } from 'react-redux'\n\nconst SignInForm = props => {\n\n\tconst dispatch = useDispatch()\n\n\tconst navigate = useNavigate()\n\n\tconst [message, setMessage] = useTimeOutMessage()\n\n\tconst onSignIn = async (values, setSubmitting) => {\n\t\tconst { userName, password } = values\n\t\tsetSubmitting(true)\n\t\ttry {\n\t\t\tconst resp = await apiSignIn({ userName, password })\n\t\t\tif (resp.data) {\n\t\t\t\tsetSubmitting(false)\n\t\t\t\tconst { token } = resp.data\n\t\t\t\t// This will set the returning token to redux & localStorage\n\t\t\t\tdispatch(onSignInSuccess(token))\n\t\t\t\t// You can also set the user info to redux here, if it comes along with your sign in api \n\t\t\t\tif(resp.data.user) {\n\t\t\t\t\tdispatch(setUser(resp.data.user || { \n\t\t\t\t\t\tavatar: '', \n\t\t\t\t\t\tuserName: 'Anonymous', \n\t\t\t\t\t\tauthority: ['USER'], \n\t\t\t\t\t\temail: ''\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tnavigate(appConfig.authenticatedEntryPath)\n\t\t\t}\n\t\t} catch (errors) {\n\t\t\tsetMessage(errors?.response?.data?.message || errors.toString())\n\t\t\tsetSubmitting(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Formik\n\t\t\tonSubmit={(values, { setSubmitting }) => {\n\t\t\t\tonSignIn(values, setSubmitting)\n\t\t\t}}\n\t\t\t...\n\t\t>\n\t\t...\n\t)\n"}),(0,i.jsxs)("p",{children:["You can also use composed ",(0,i.jsx)("code",{children:"signIn"})," function propvided by our"," ",(0,i.jsx)("code",{children:"useAuth"})," hooks, located at"," ",(0,i.jsx)("code",{children:"src/utils/hooks/useAuth.js"})]}),(0,i.jsxs)("div",{className:"mt-10",id:"overview",children:[(0,i.jsx)("h5",{children:"Overview"}),(0,i.jsxs)("p",{children:["Once your backend API was ready integrate, you can config the API endpoints at",(0,i.jsx)("code",{children:"src/services/AuthService.js"})," and edit the implementation at",(0,i.jsx)("code",{children:"src/views/auth/*/xxxForm.js"})," &"," ",(0,i.jsx)("code",{children:"src/store/auth/*.js"})," based on your application needed."]})]})]})}}}]);
//# sourceMappingURL=3744.dad37b07.chunk.js.map