"use strict";(self.webpackChunkMempoverse=self.webpackChunkMempoverse||[]).push([[2141],{62141:function(t,n,e){e.r(n);e(72791);var i=e(99965),r=e(80184);n.default=function(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["To initialize the app direction, simply set ",(0,r.jsx)("code",{children:"direction"})," field as",(0,r.jsx)("code",{children:"'ltr'"})," or ",(0,r.jsx)("code",{children:"'rtl'"})," in ",(0,r.jsx)("code",{children:"src/configs/theme.config.js"}),". For example:"]}),(0,r.jsx)(i.d3,{language:"js",children:"export const themeConfig = {\n\t...\n\tdirection: 'rtl'\n}"}),(0,r.jsxs)("div",{className:"mt-10",id:"hook",children:[(0,r.jsx)("h5",{children:"Hook"}),(0,r.jsx)("p",{className:"mt-1",children:"You can access or update the direction in a component via our prepared hook."}),(0,r.jsx)(i.d3,{language:"js",children:"import React from 'react'\nimport { InputGroup, Button } from 'components/ui'\nimport useDirection from 'utils/hooks/useDirection'\n\nconst dirList = [\n\t{ value: 'ltr', label: 'LTR' },\n\t{ value: 'rtl', label: 'RTL' }\n]\n\nconst DirectionSwitcher = () => {\n\n\tconst [direction, updateDirection] = useDirection()\n\n\tconst onDirChange = (val) => {\n\t\tupdateDirection(val)\n\t}\n\n\treturn (\n\t\t<InputGroup size=\"sm\">\n\t\t\t{\n\t\t\t\tdirList.map(dir => (\n\t\t\t\t\t<Button \n\t\t\t\t\t\tkey={dir.value}\n\t\t\t\t\t\tactive={direction === dir.value}\n\t\t\t\t\t\tonClick={() => onDirChange(dir.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{dir.label}\n\t\t\t\t\t</Button>\n\t\t\t\t))\n\t\t\t}\n\t\t</InputGroup>\n\t)\n}\n\nexport default DirectionSwitcher\n"})]})]})}}}]);
//# sourceMappingURL=2141.50d44ceb.chunk.js.map