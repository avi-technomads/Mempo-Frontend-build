{"version":3,"file":"static/js/4277.2100ab85.chunk.js","mappings":"yJA0LA,UAvLqB,WACpB,OACC,iCACC,0BACC,cAAGA,KAAK,wBAAwBC,OAAO,SAASC,IAAI,aAApD,mBADD,uTAIwE,cAAGF,KAAK,gCAAgCC,OAAO,SAASC,IAAI,aAA5D,iCAJxE,+JAOA,+EACmD,yCADnD,+DAIA,2BACC,2BACC,uCACA,cAAGC,UAAU,MAAb,2DAED,2BACC,sCACA,cAAGA,UAAU,MAAb,iEAED,2BACC,sCACA,cAAGA,UAAU,MAAb,kGAGF,qCAAW,cAAGH,KAAK,yCAAyCC,OAAO,SAASC,IAAI,aAArE,2BAAX,aAAuH,mCAAvH,OAA2I,oCAA3I,oCACA,iBAAKC,UAAU,QAAQC,GAAG,gBAA1B,WACC,4CACA,cAAGD,UAAU,OAAb,0NACA,SAAC,KAAD,CAAmBE,SAAS,KAA5B,sTAYD,yHACA,SAAC,KAAD,CAAmBA,SAAS,MAA5B,4pBAsBA,iBAAKF,UAAU,QAAQC,GAAG,mBAA1B,WACC,gDACA,cAAGD,UAAU,OAAb,6NAKA,SAAC,KAAD,CAAmBE,SAAS,MAA5B,gPAcD,iBAAKF,UAAU,QAAQC,GAAG,kBAA1B,WACC,gDACA,cAAGD,UAAU,OAAb,uEAGA,SAAC,KAAD,CAAmBE,SAAS,MAA5B,iZAoBD,iBAAKF,UAAU,QAAQC,GAAG,oCAA1B,WACC,kEACA,eAAGD,UAAU,OAAb,oDACuC,+CADvC,yBAGA,SAAC,KAAD,CAAmBE,SAAS,MAA5B,++BAwCD,6DAAmC,4CAAnC,qBACA,SAAC,KAAD,CAAmBA,SAAS,MAA5B,qdAmBA,oDAA0B,cAAGL,KAAK,gCAAgCC,OAAO,SAASC,IAAI,aAA5D,2BAA1B,mFAGF,C","sources":["views/docs/Documentations/components/Redux.js"],"sourcesContent":["import React from 'react'\r\nimport { SyntaxHighlighter } from 'components/shared'\r\n\r\nconst ReduxToolkit = () => {\r\n\treturn (\r\n\t\t<> \r\n\t\t\t<p>\r\n\t\t\t\t<a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noreferrer\">Redux</a> is a popular application state management solution that can be integrated with front-end frameworks like React,\r\n\t\t\t\tit allows you to write scalable apps with maintainable codebases,\r\n\t\t\t\thowever, using redux requires a lot of boilerplate code.\r\n\t\t\t\tTo reduce the boilerplate codes and facilitate easier functionalities, <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noreferrer\">Redux toolkit (RTK)</a> is a better option, \r\n\t\t\t\tit comes with comes with built in Redux Thunk Middleware that use for asynchronous actions and standard way to writing Redux logic.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tYou can find out Redux store configurations under <code>src/store/</code>, \r\n\t\t\t\tthere's also several slice globally used as following:\r\n\t\t\t</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<strong>theme</strong>\r\n\t\t\t\t\t<p className=\"m-0\">This state handle all theme related data.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<strong>auth</strong>\r\n\t\t\t\t\t<p className=\"m-0\">This state handles the app authentication info.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<strong>base</strong>\r\n\t\t\t\t\t<p className=\"m-0\">This state is a general app state, you can place any commonly used data here.</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<p>We also <a href=\"https://github.com/rt2zz/redux-persist\" target=\"_blank\" rel=\"noreferrer\">redux-persist</a> to keep <code>auth</code> & <code>theme</code> state alive in localStorage.</p>\r\n\t\t\t<div className=\"mt-10\" id=\"codeSplitting\">\r\n\t\t\t\t<h5>Code Splitting</h5>\r\n\t\t\t\t<p className=\"mt-1\">We have implemented reducer injection approaches in our code base for a code splitting strategy, it can dynamically add reducers to the store when needed. Here is some example code for reducers registry:</p>\r\n\t\t\t\t<SyntaxHighlighter language=\"js\">{`// store/index.js \r\nimport { combineReducers } from '@reduxjs/toolkit'\r\nimport yourSlice from './yourSlice'\r\nimport anyOtherSlice from './anyOtherSlice'\r\n\r\nconst reducer = combineReducers({\r\n    yourStateKeyName: yourSlice,\r\n\tanyOtherSliceKeyName: anyOtherSlice\r\n})\r\n\r\nexport default reducer`}</SyntaxHighlighter>\r\n\t\t\t</div>\r\n\t\t\t<p>And then you can expose them to your components (we prefer the entry of your view component)</p>\r\n\t\t\t<SyntaxHighlighter language=\"jsx\">{`import reducer from './store'\r\nimport { injectReducer } from 'store/index'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { someActionFromYourSlice } from './store/yourSlice'\r\n\r\ninjectReducer('yourReducerName', reducer)\r\nconst YourComponent = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\t// Use the useSelector hook to access the store state.\r\n\tconst someStateFromYourSlice = useSelector((state) => state.yourReducerName.yourStateKeyName.someState)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Use useDispatch hook to dispatch an action.\r\n\t\tdispatch(someActionFromYourSlice())\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>{someStateFromYourSlice}</>\r\n\t)\r\n}`}</SyntaxHighlighter>\r\n\t\t\t<div className=\"mt-10\" id=\"creatingNewSlice\">\r\n\t\t\t\t<h5>Creating New Slice</h5>\r\n\t\t\t\t<p className=\"mt-1\">\r\n\t\t\t\t\tSlice is a collection of reducer logic and actions for a single feature,\r\n\t\t\t\t \thence we sugguest to place slice file under your features module folder for better logic scoping. \r\n\t\t\t\t\tHere is a basic example of a slice.\r\n\t\t\t\t</p>\r\n\t\t\t\t<SyntaxHighlighter language=\"jsx\">{`import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  someState: ''\r\n}\r\n\r\nconst yourSlice = createSlice({\r\n  name: 'sliceName',\r\n  initialState,\r\n  reducers: {}\r\n})\r\n\r\nexport default yourSlice.reducer`}</SyntaxHighlighter>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"mt-10\" id=\"creatingReduces\">\r\n\t\t\t\t<h5>Creating a reducer</h5>\r\n\t\t\t\t<p className=\"mt-1\">\r\n\t\t\t\t\tYou can define your reducers in slice as following code:\r\n\t\t\t\t</p>\r\n\t\t\t\t<SyntaxHighlighter language=\"jsx\">{`import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  someState: ''\r\n}\r\n\r\nconst yourSlice = createSlice({\r\n  name: 'sliceName',\r\n  initialState,\r\n  reducers: {\r\n\tsomeActionFromYourSlice: (state, action) => {\r\n\t\tstate.someState = action.payload\r\n\t},\r\n  }\r\n})\r\n\r\nexport const { someActionFromYourSlice } = yourSlice.actions\r\n\r\nexport default yourSlice.reducer`}</SyntaxHighlighter>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"mt-10\" id=\"asyncRequestsWithCreateAsyncThunk\">\r\n\t\t\t\t<h5>Async Requests with createAsyncThunk</h5>\r\n\t\t\t\t<p className=\"mt-1\">\r\n\t\t\t\t\tYou can also make an API request with <code>createAsyncThunk</code> via extraReducers\r\n\t\t\t\t</p>\r\n\t\t\t\t<SyntaxHighlighter language=\"jsx\">{`import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { someService } from 'services/SomeService'\r\n\r\nexport const getApiData = createAsyncThunk('sliceName/getApiData',async (data) => {\r\n    const response = await someService(data)\r\n    return response.data\r\n})\r\n\r\nconst initialState = {\r\n  someState: ''\r\n  loading: false\r\n}\r\n\r\nconst yourSlice = createSlice({\r\n  name: 'sliceName',\r\n  initialState,\r\n  reducers: {\r\n\tsomeActionFromYourSlice: (state, action) => {\r\n\t\tstate.someState = action.payload\r\n\t},\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n\t\t.addCase(getApiData.fulfilled, (state, action) => {\r\n\t\t\tstate.someState = action.payload\r\n\t\t\tstate.loading = false\r\n\t\t})\r\n\t\t.addCase(getApiData.pending, (state) => {\r\n\t\t\tstate.loading = true\r\n\t\t})\r\n\t\t.addCase(getApiData.rejected, (state) => {\r\n\t\t\tstate.loading = false\r\n\t\t})\r\n  },\r\n})\r\n\r\nexport const { someActionFromYourSlice } = yourSlice.actions\r\n\r\nexport default yourSlice.reducer`}</SyntaxHighlighter>\r\n\t\t\t</div>\r\n\t\t\t<p>Here's also another example for <code>extrareducers</code> as an object:</p>\r\n\t\t\t<SyntaxHighlighter language=\"jsx\">{`const yourSlice = createSlice({\r\n  \t\t...,\r\n\t  extraReducers: {\r\n\t\t[getApiData.fulfilled]: (state, action) => {\r\n\t\t\tstate.someState = action.payload\r\n\t\t\tstate.loading = false\r\n\t\t},\r\n\t\t[getApiData.pending]: (state) => {\r\n\t\t\tstate.loading = true\r\n\t\t},\r\n\t\t[getApiData.pending]: (state) => {\r\n\t\t\tstate.loading = false\r\n\t\t},\r\n\t}\r\n})\r\n\r\nexport const { someActionFromYourSlice } = yourSlice.actions\r\n\r\nexport default yourSlice.reducer`}</SyntaxHighlighter>\r\n\t\t\t<p>You can also study the <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"noreferrer\">redux-toolkit</a> documentation to better understand if you are not familiar redux-toolkit. </p>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ReduxToolkit"],"names":["href","target","rel","className","id","language"],"sourceRoot":""}