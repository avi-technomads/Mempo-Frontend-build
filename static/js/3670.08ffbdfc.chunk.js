"use strict";(self.webpackChunkMempoverse=self.webpackChunkMempoverse||[]).push([[3670],{63670:function(t,e,n){n.r(e);n(72791);var r=n(99965),s=n(80184);e.default=function(){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Mempoverse Admin uses"," ",(0,s.jsx)("a",{href:"https://miragejs.com/",target:"_blank",rel:"noreferrer",children:"miragejs"})," ","for mocking API calls, all the api interaction in our demo are work under miragejs."]}),(0,s.jsxs)("div",{className:"mt-10",id:"disableMockApi",children:[(0,s.jsx)("h5",{children:"Enable mock api"}),(0,s.jsxs)("p",{className:"mt-1",children:["Mock api was disabled by default in our starter-kit, you can turn in on via setting ",(0,s.jsx)("code",{children:"enableMock"})," field to true in"," ",(0,s.jsx)("code",{children:"src/configs/app.config.js"})]}),(0,s.jsx)(r.d3,{language:"js",children:"const appConfig = {\n    ...,\n    enableMock: true\n}"})]}),(0,s.jsxs)("div",{className:"mt-10",id:"usingMockApi",children:[(0,s.jsx)("h5",{children:"Using mock api"}),(0,s.jsx)("p",{className:"mt-1",children:"If you have intent to use mock api, you can follow the steps below to create a fake db data & api"}),(0,s.jsxs)("ol",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Setup"}),(0,s.jsxs)("p",{className:"mt-1",children:["Visit ",(0,s.jsx)("code",{children:"src/mock/index.js"}),", and here is the overall configuration of mirage"]}),(0,s.jsx)(r.d3,{language:"js",children:"export default function mockServer({ environment = 'test' }) {\n\treturn createServer({\n\t\tenvironment,\n\t\tseeds(server) {\n\t\t\tserver.db.loadData({\n\t\t\t\t...\n\t\t\t})\n\t\t},\n\t\troutes() {\n\t\t\t...\n\t\t},\n\t})\n}"})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Add static data"}),(0,s.jsx)("p",{className:"mt-1",children:"Now we can add some data to the fake db"}),(0,s.jsx)(r.d3,{language:"js",children:"return createServer({\n\t\tenvironment,\n\t\tseeds(server) {\n\t\t\tserver.db.loadData({\n\t\t\t\tusersData: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: '1',\n\t\t\t\t\t\tname: 'Carolyn Perkins',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: '2',\n\t\t\t\t\t\tname: 'Terrance Moreno',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: '3',\n\t\t\t\t\t\tname: 'Ron Vargas',\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t})\n\t\t},\n\t\t...\n\t})\n}"})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Create mock api"}),(0,s.jsx)("p",{className:"mt-1",children:"Created a mock api under route"}),(0,s.jsx)(r.d3,{language:"js",children:"return createServer({\n\t\t...\n\t\troutes() {\n\t\t\tthis.get('api/getUsers', schema => schema.db.usersData)\n\t\t},\n})"})]})]})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("p",{children:"And now you can make request to this api & get the static data just setted above as response"}),(0,s.jsx)(r.d3,{language:"js",children:"// service\nimport ApiService from \"./ApiService\"\n\nexport async function apiGetUser () {\n    return ApiService.fetchData({\n        url: '/api/getUsers',\n        method: 'get'\n    })\n}"}),(0,s.jsx)(r.d3,{language:"js",children:"// component\nimport { useEffect } from 'react'\nimport { apiGetUser } from './YourService.js'\n\nconst YourComponent = props => {\n\n\tconst fetchData = async () => {\n\t\ttry {\n\t\t\tconst resp = await apiGetUser()\n\t\t\tconsole.log(resp.data)\n\t\t} catch (errors) {\n\t\t\t...handle errors\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tfetchData()\n\t}, [])\n\n\treturn (\n\t\t...\n\t)\n}"})]})]})}}}]);
//# sourceMappingURL=3670.08ffbdfc.chunk.js.map