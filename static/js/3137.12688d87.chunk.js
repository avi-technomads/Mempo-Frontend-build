"use strict";(self.webpackChunkMempoverse=self.webpackChunkMempoverse||[]).push([[3137],{33137:function(e,t,n){n.r(t);n(72791);var o=n(99965),r=n(80184);t.default=function(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["To initialize dark or light mode to the app, simply set ",(0,r.jsx)("code",{children:"mode"})," field as",(0,r.jsx)("code",{children:"'light'"})," or ",(0,r.jsx)("code",{children:"'dark'"})," in ",(0,r.jsx)("code",{children:"src/configs/theme.config.js"}),". For example:"]}),(0,r.jsx)(o.d3,{language:"js",children:"export const themeConfig = {\n\t...\n\tmode: 'dark'\n}"}),(0,r.jsxs)("div",{className:"mt-10",id:"hook",children:[(0,r.jsx)("h5",{children:"Hook"}),(0,r.jsx)("p",{className:"mt-1",children:"You can access or update the mode in a component via our prepared hook."}),(0,r.jsx)(o.d3,{language:"js",children:"import React from 'react'\nimport { Switcher } from 'components/ui'\nimport useDarkMode from 'utils/hooks/useDarkMode'\n\nconst ModeSwitcher = () => {\n\n\tconst [isDark, setIsDark] = useDarkMode()\n\n\tconst onSwitchChange = (checked) => {\n\t\tsetIsDark(checked ? 'dark' : 'light')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Switcher \n\t\t\t\tvalue={isDark}\n\t\t\t\tonChange={checked => onSwitchChange(checked)}\n\t\t\t />\n\t\t</div>\n\t)\n}\n\nexport default ModeSwitcher"})]})]})}}}]);
//# sourceMappingURL=3137.12688d87.chunk.js.map