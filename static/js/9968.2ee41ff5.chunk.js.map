{"version":3,"file":"static/js/9968.2ee41ff5.chunk.js","mappings":"yJAiHA,UA9GuB,WACtB,OACC,iCACC,wFACA,2BACC,yBACC,6CAAmB,4CAAnB,mDAA4F,uCAA5F,mBAED,2BACC,iEAAuC,mDAAvC,4EACA,SAAC,KAAD,CAAmBA,SAAS,KAA5B,4NAWD,2BACC,+EACA,SAAC,KAAD,CAAmBA,SAAS,KAA5B,idAyBD,2BACC,gEAAsC,mDACtC,SAAC,KAAD,CAAmBA,SAAS,MAA5B,siBAuBF,iBAAKC,UAAU,QAAQC,GAAG,WAA1B,WACC,sCACA,cAAGD,UAAU,OAAb,0OAKA,2BACC,2BACC,wDACA,cAAGA,UAAU,OAAb,6DACA,SAAC,KAAD,CAAmBD,SAAS,KAA5B,mDAED,2BACC,gDACA,eAAGC,UAAU,OAAb,2CAC8B,oDAD9B,wCAGA,oCAAU,4CAAV,qBAAqD,mCAArD,2CACA,SAAC,KAAD,CAAmBD,SAAS,KAA5B,+TAgBL,C","sources":["views/docs/Documentations/components/ApiIntegration.js"],"sourcesContent":["import React from 'react'\r\nimport { SyntaxHighlighter } from 'components/shared'\r\n\r\nconst ApiIntegration = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>Follow the steps below to make backend api linkage working.</p>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<p>First, create a <code>xxxService.js</code> file(depends on your feature or module) under <code>services</code> directory</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<p>Declare an async function returning <code>ApiService.fetchData</code> method and pass in your api configuration details as the code below:</p>\r\n\t\t\t\t\t<SyntaxHighlighter language=\"js\">{`import ApiService from \"./ApiService\"\r\n\r\nexport async function yourApi (data) {\r\n    return ApiService.fetchData({\r\n        url: '/your-api-url',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n...`}</SyntaxHighlighter>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<p>And now you can hook up this API in your component</p>\r\n\t\t\t\t\t<SyntaxHighlighter language=\"js\">{`import { useEffect } from 'react'\r\nimport { yourApi } from './YourService.js'\r\n\r\nconst YourComponent = props => {\r\n\r\n\tconst fetchData = async () => {\r\n\t\tconst reqeustParam = { key: 'value'}\r\n\t\ttry {\r\n\t\t\tconst resp = await yourApi(reqeustParam)\r\n\t\t\tif (resp.data) {\r\n\t\t\t\t...do something\r\n\t\t\t}\r\n\t\t} catch (errors) {\r\n\t\t\t...handle errors\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchData()\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t...\r\n\t)`}</SyntaxHighlighter>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<p>you can also use this service with <code>createAsyncThunk</code></p>\r\n\t\t\t\t\t<SyntaxHighlighter language=\"jsx\">{`import { createSlice } from '@reduxjs/toolkit'\r\nimport { yourApi } from './YourService.js'\r\n\r\nexport const getApiData = createAsyncThunk('sliceName/getApiData',async (data) => {\r\n    const response = await yourApi(data)\r\n    return response.data\r\n})\r\n\r\nconst yourSlice = createSlice({\r\n\t...\r\n\textraReducers: (builder) => {\r\n\t\tbuilder\r\n\t\t\t.addCase(getApiData.fulfilled, (state, action) => {\r\n\t\t\t\t...\r\n\t\t\t})\r\n\t},\r\n})\r\n\r\nexport const { someActionFromYourSlice } = yourSlice.actions\r\n\r\nexport default yourSlice.reducer`}</SyntaxHighlighter>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<div className=\"mt-10\" id=\"proxying\">\r\n\t\t\t\t<h5>Proxying</h5>\r\n\t\t\t\t<p className=\"mt-1\">\r\n\t\t\t\t\tDeveloper often consume API from different servers than the frontend application, \r\n\t\t\t\t\tthere are complications that arise as a result of requests being sent across both servers, \r\n\t\t\t\t\there is some way to setting up a proxy server.\r\n\t\t\t\t</p>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<strong>Add proxy package.json</strong>\r\n\t\t\t\t\t\t<p className=\"mt-1\">A simple & quick solution to proxying a server</p>\r\n\t\t\t\t\t\t<SyntaxHighlighter language=\"js\">{`\"proxy\": \"http:yourDevDomain.com\"`}</SyntaxHighlighter>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<strong>Manually setup</strong>\r\n\t\t\t\t\t\t<p className=\"mt-1\">\r\n\t\t\t\t\t\t\tYou can choose to setup with <code>http-proxy-middleware</code> for more flexible configuration.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>Create <code>setupProxy.js</code> and place under <code>src/</code> directory with code following code:</p>\r\n\t\t\t\t\t\t<SyntaxHighlighter language=\"js\">{`const { createProxyMiddleware } = require('http-proxy-middleware')\r\n\r\nmodule.exports = function(app) {\r\n\tapp.use(\r\n\t\t'/api',\r\n\t\t\tcreateProxyMiddleware({\r\n\t\t\ttarget: 'http:yourDevDomain.com', // <--- config the url based on your backend server\r\n\t\t\tchangeOrigin: true,\r\n\t\t})\r\n\t)\r\n}`}</SyntaxHighlighter>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ApiIntegration"],"names":["language","className","id"],"sourceRoot":""}