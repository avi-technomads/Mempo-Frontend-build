{"version":3,"file":"static/js/8274.3a7dd8cd.chunk.js","mappings":"yJA2HA,UAxH6B,WAC3B,OACE,iCACE,gDACuB,KACrB,cACEA,KAAK,6BACLC,OAAO,SACPC,IAAI,sBAHN,2BAMK,IARP,+EAUK,gDAEL,iBAAKC,UAAU,QAAQC,GAAG,kBAA1B,WACE,8CACA,eAAGD,UAAU,OAAb,kEACwD,KACtD,2CAFF,uCAIA,SAAC,KAAD,CAAmBE,SAAS,KAA5B,6NAaF,iBAAKF,UAAU,QAAQC,GAAG,mBAA1B,WACE,+CACA,eAAGD,UAAU,OAAb,+BACmB,2CADnB,2CAIA,SAAC,KAAD,CAAmBE,SAAS,KAA5B,sQAaF,iBAAKF,UAAU,QAAQC,GAAG,eAA1B,WACE,4CACA,eAAGD,UAAU,OAAb,iDACqC,iDADrC,8EAEyE,KACvE,0CAEF,SAAC,KAAD,CAAmBE,SAAS,OAA5B,4HAOA,+DACoC,mDADpC,sBAEiB,wCAFjB,6GAIO,KACL,cACEL,KAAK,sDACLC,OAAO,SACPC,IAAI,sBAHN,UAKE,sCAVJ,QAcA,SAAC,KAAD,CAAmBG,SAAS,KAA5B,mhBAqBA,qEAEF,iBAAKF,UAAU,QAAQC,GAAG,yBAA1B,WACE,yDACA,eAAGD,UAAU,OAAb,iEACuD,KACrD,0DAFF,kBAE0D,KACxD,qCAHF,mBAKA,SAAC,KAAD,CAAmBE,SAAS,KAA5B,6EAOP,C","sources":["views/docs/Documentations/components/Internationalization.js"],"sourcesContent":["import React from \"react\";\r\nimport { SyntaxHighlighter } from \"components/shared\";\r\n\r\nconst Internationalization = () => {\r\n  return (\r\n    <>\r\n      <p>\r\n        Mempoverse Admin use{\" \"}\r\n        <a\r\n          href=\"https://react.i18next.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          react-i18next\r\n        </a>{\" \"}\r\n        for internationalization, you can find corresponding files can be found\r\n        in <code>src/locales/*</code>\r\n      </p>\r\n      <div className=\"mt-10\" id=\"translatingText\">\r\n        <h5>Translating text</h5>\r\n        <p className=\"mt-1\">\r\n          One of the simplest usage for translate text is using{\" \"}\r\n          <code>useTranslate</code> hook provided by react-i18next.\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`import { useTranslation } from 'react-i18next'\r\n\r\nconst Component = () => {\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div>{t('your.translate.key')}</div>\r\n  )\r\n}\r\n\r\nexport default Component`}</SyntaxHighlighter>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"changingLanguage\">\r\n        <h5>Changing language</h5>\r\n        <p className=\"mt-1\">\r\n          You can also use <code>useTranslate</code> hook to update the current\r\n          language\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`import { useTranslation } from 'react-i18next'\r\n\r\nconst Component = () => {\r\n\r\n  const { i18n } = useTranslation()\r\n\r\n  return (\r\n    <button onClick={() => i18n.changeLanguage('fr')}>Change language</button>\r\n  )\r\n}\r\n\r\nexport default Component`}</SyntaxHighlighter>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"addNewLocale\">\r\n        <h5>Add new locale</h5>\r\n        <p className=\"mt-1\">\r\n          We store all the locale data under <code>src/locales/lang/*</code>. To\r\n          add a new locale, create a Json file under this directory. For example{\" \"}\r\n          <code>fr.json</code>\r\n        </p>\r\n        <SyntaxHighlighter language=\"json\">{`{\r\n    \"your\": {\r\n        \"translate\": {\r\n            \"key\": \"votre cl√© de traduction\"\r\n        },\r\n\t}\r\n}`}</SyntaxHighlighter>\r\n        <p>\r\n          Now you can import this file into <code>src/locales/index.js</code> &\r\n          inject them to <code>resources</code> field, this is the entry file of\r\n          all locales. Also, create an object to load date locale dynamically\r\n          from{\" \"}\r\n          <a\r\n            href=\"https://github.com/iamkun/dayjs/tree/dev/src/locale\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <code>dayjs</code>\r\n          </a>\r\n          .\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`import i18n from 'i18next'\r\nimport { initReactI18next } from 'react-i18next'\r\nimport en from './lang/en.json'\r\nimport fr from './lang/fr.json'\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: en\r\n    },\r\n    fr: { // <--- this will be the value you use on changeLanguage method\r\n        translation: fr\r\n    },\r\n}\r\n\r\n// Consistent the key with resource to load relavant locale from day.js\r\nexport const dateLocales = {\r\n    en: () => import('dayjs/locale/en'),\r\n    fr: () => import('dayjs/locale/fr'),\r\n}\r\n\r\n`}</SyntaxHighlighter>\r\n        <p>And, the new locale is basically set.</p>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"settingDefaultLanguage\">\r\n        <h5>Remove internationalization</h5>\r\n        <p className=\"mt-1\">\r\n          To set the default language, you might need to visit{\" \"}\r\n          <code>src/configs/theme.config.js</code> and change the{\" \"}\r\n          <code>locale</code> field value\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`export const themeConfig = {\r\n    ...\r\n    locale: 'fr'\r\n}`}</SyntaxHighlighter>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Internationalization;\r\n"],"names":["href","target","rel","className","id","language"],"sourceRoot":""}