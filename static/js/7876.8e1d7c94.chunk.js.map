{"version":3,"file":"static/js/7876.8e1d7c94.chunk.js","mappings":"6JAIQA,EAA6BC,EAAAA,GAAAA,GAAzBC,EAAyBD,EAAAA,GAAAA,GAArBE,EAAqBF,EAAAA,GAAAA,GAAjBG,EAAiBH,EAAAA,GAAAA,MAAVI,EAAUJ,EAAAA,GAAAA,MAyCrC,IAvCyB,SAAC,GAA2C,IAA1CK,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,IAA2B,IAAtBC,QAAAA,OAAsB,MAAZ,OAAY,EAChE,OACI,2BACMD,EAAIE,OAAS,IAAMH,IAAiB,iCACtC,gBAAKI,UAAU,OAAf,SAEQH,EAAII,KAAI,SAAAC,GAAI,OACR,4BACI,eAAIF,UAAU,OAAd,SAAsBE,EAAKC,aAC3B,UAAC,KAAD,CAAOH,UAAS,yBAAoBH,EAAIE,OAAS,EAAI,OAAS,IAA9D,WACI,SAACL,EAAD,WACI,UAACJ,EAAD,YACI,SAACE,EAAD,UAAKM,KACL,SAACN,EAAD,2BACA,SAACA,EAAD,oBACA,SAACA,EAAD,4BAGR,SAACG,EAAD,UAEQO,EAAKL,IAAII,KAAI,SAAAG,GAAI,OACb,UAACd,EAAD,YACI,SAACG,EAAD,CAAIO,UAAU,gBAAd,SAA+BI,EAAKC,YACpC,SAACZ,EAAD,WAAKa,EAAAA,EAAAA,IAAgBF,EAAKG,SAC1B,SAACd,EAAD,WAAKa,EAAAA,EAAAA,IAAgBF,EAAKI,SAC1B,SAACf,EAAD,WAAKa,EAAAA,EAAAA,IAAgBF,EAAKK,aAJ9B,cAAgBL,EAAKC,UADR,WAbjC,cAAiBH,EAAKC,WADd,QA+B/B,C,0FCmHD,UA1JoB,WAClB,OACE,iCACE,gDACuB,KACrB,cACEO,KAAK,2BACLC,OAAO,SACPC,IAAI,sBAHN,0BAMK,IARP,2HAYA,iBAAKZ,UAAU,OAAOa,GAAG,WAAzB,WACE,sCACA,eAAGb,UAAU,OAAb,gEACsD,KACpD,iEAFF,oDAKA,SAAC,KAAD,CAAmBc,SAAS,KAA5B,wGAOA,2BACE,2BACE,8CACA,cAAGd,UAAU,OAAb,+EAIF,2BACE,iDACA,cAAGA,UAAU,OAAb,2FAON,iBAAKA,UAAU,QAAQa,GAAG,iBAA1B,WACE,gDACA,cAAGb,UAAU,OAAb,mHAIA,SAAC,KAAD,CAAmBc,SAAS,KAA5B,oTAYF,iBAAKd,UAAU,QAAQa,GAAG,YAA1B,WACE,uCACA,eAAGb,UAAU,OAAb,8HAE2C,wCAF3C,gGAIkB,sCAJlB,QAI0C,qCAJ1C,sBAME,kBANF,kBAOgB,wCAPhB,yEAUA,SAAC,KAAD,CAAmBc,SAAS,KAA5B,qHAMA,4CACiB,6CADjB,4DAE8B,kDAF9B,iFAMF,iBAAKd,UAAU,QAAQa,GAAG,YAA1B,WACE,kCACA,eAAGb,UAAU,OAAb,WACE,mCADF,wDACyE,KACvE,4CAFF,+CAIA,SAAC,KAAD,CAAmBc,SAAS,KAA5B,2RAYA,+FACsE,KACpE,mCAFF,mBAIA,SAAC,IAAD,CACElB,cAAY,EACZE,QAAQ,aACRD,IAAK,CACH,CACEA,IAAK,CACH,CACEQ,SAAU,oBACVG,KAAK,iFACLC,QAAQ,yBACRF,KAAM,8BAER,CACEF,SAAU,SACVG,KAAK,6CACLC,QAAS,IACTF,KAAM,qCAER,CACEF,SAAU,cACVG,KAAK,6CACLC,QAAS,IACTF,KAAM,oDAER,CACEF,SAAU,SACVG,KAAK,uBACLC,QAAQ,oBACRF,KAAM,6BAER,CACEF,SAAU,SACVG,KAAK,sJACLC,QAAQ,IACRF,KAAM,oDASvB,C","sources":["components/docs/DemoComponentApi/index.js","views/docs/Documentations/components/Routing.js"],"sourcesContent":["import React from 'react'\r\nimport { Table } from 'components/ui'\r\nimport ReactHtmlParser from 'react-html-parser'\r\n\r\nconst { Tr, Th, Td, THead, TBody } = Table\r\n\r\nconst DemoComponentApi = ({hideApiTitle, api, keyText = 'Prop'}) => {\r\n    return (\r\n        <div>\r\n            {(api.length > 0 && !hideApiTitle) && <h4>API</h4>}\r\n            <div className=\"mt-4\">\r\n                {\r\n                    api.map(comp => (\r\n                        <div key={`api-${comp.component}`}>\r\n                            <h6 className=\"mb-3\">{comp.component}</h6>\r\n                            <Table className={`demo-api-table ${api.length > 1 ? 'mb-8' : ''}`}>\r\n                                <THead>\r\n                                    <Tr>\r\n                                        <Th>{keyText}</Th>\r\n                                        <Th>Description</Th>\r\n                                        <Th>Type</Th>\r\n                                        <Th>Default</Th>\r\n                                    </Tr>\r\n                                </THead>\r\n                                <TBody>\r\n                                    {\r\n                                        comp.api.map(item => (\r\n                                            <Tr key={`row-${item.propName}`}>\r\n                                                <Td className=\"font-semibold\">{item.propName}</Td>\r\n                                                <Td>{ReactHtmlParser(item.desc)}</Td>\r\n                                                <Td>{ReactHtmlParser(item.type)}</Td>\r\n                                                <Td>{ReactHtmlParser(item.default)}</Td>\r\n                                            </Tr>\r\n                                        ))\r\n                                    }\r\n                                </TBody>\r\n                            </Table>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DemoComponentApi\r\n","import React from \"react\";\r\nimport { SyntaxHighlighter } from \"components/shared\";\r\nimport DemoComponentApi from \"components/docs/DemoComponentApi\";\r\n\r\nconst RouteAndNav = () => {\r\n  return (\r\n    <>\r\n      <p>\r\n        Mempoverse Admin use{\" \"}\r\n        <a\r\n          href=\"https://reactrouter.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          react-router\r\n        </a>{\" \"}\r\n        as base routing system. On this guide, you will find out how to create a\r\n        new routes and how existing routes working.\r\n      </p>\r\n      <div className=\"mt-6\" id=\"overview\">\r\n        <h5>Overview</h5>\r\n        <p className=\"my-1\">\r\n          You can find the template's router configuration in{\" \"}\r\n          <code>src/configs/routes.config/index.js</code>, there's 2 type of\r\n          route group as following.\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`export const publicRoutes = [\r\n    ...\r\n]\r\n\r\nexport const protectedRoutes = [\r\n    ...\r\n]`}</SyntaxHighlighter>\r\n        <ul>\r\n          <li>\r\n            <strong>publicRoutes</strong>\r\n            <p className=\"mt-1\">\r\n              this routes group included all routes that open to all users.\r\n            </p>\r\n          </li>\r\n          <li>\r\n            <strong>protectedRoutes</strong>\r\n            <p className=\"mt-1\">\r\n              This routes group included all routes that required\r\n              authentication.\r\n            </p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"addingNewRoute\">\r\n        <h5>Adding a new route</h5>\r\n        <p className=\"mt-1\">\r\n          You can add the following code to any of the routing groups, depending\r\n          on the authority you wish to.\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`export const protectedRoutes = [\r\n\t{\r\n\t\tkey: 'a-unique-id-for-this-view'\r\n        path: 'my-new-view-path',\r\n        component: React.lazy(() => import('views/MyNewComponent')),\r\n        authority: [],\r\n        meta: {\r\n            pageContainerType: 'gutter'\r\n        }\r\n    },\t\t\t\r\n]`}</SyntaxHighlighter>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"authority\">\r\n        <h5>Authority</h5>\r\n        <p className=\"mt-1\">\r\n          Mempoverse Admin routes comes with a simple role based access control,\r\n          you can set accessible roles as Array to <code>authority</code> field.\r\n          Taking following code as example, the route only available for user\r\n          who have either <code>'admin'</code> or <code>'user'</code> in their\r\n          profile.\r\n          <br />\r\n          If your leave <code>authority</code> field as empty array, the route\r\n          will open to any roles to access.\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`export const protectedRoutes = [\r\n\t{\r\n\t\t...\r\n        authority: ['admin', 'user'],\r\n    },\t\t\t\r\n]`}</SyntaxHighlighter>\r\n        <p>\r\n          In our default <code>AuthorityGuard</code>, it will check the current\r\n          user role from redux state (<code>auth.user.authority</code>). You can\r\n          use this as base to extend or customize your access control.\r\n        </p>\r\n      </div>\r\n      <div className=\"mt-10\" id=\"authority\">\r\n        <h5>Meta</h5>\r\n        <p className=\"mt-1\">\r\n          <code>meta</code> field allow us to carry addtional information to the{\" \"}\r\n          <code>PageContainer</code> or the view component under this route.\r\n        </p>\r\n        <SyntaxHighlighter language=\"js\">{`export const protectedRoutes = [\r\n\t{\r\n\t\t...\r\n        meta: {\r\n            pageContainerType: 'gutter'\r\n\t\t\theader: 'Page Title',\r\n\t\t\textraHeader: React.lazy(() => import('SomeComponent')),\r\n\t\t\tfooter: false\r\n\t\t\tlayout: 'blank'\r\n        }\r\n    },\t\t\t\r\n]`}</SyntaxHighlighter>\r\n        <p>\r\n          The view component under this route will be able to receive all the{\" \"}\r\n          <code>meta</code> data above.\r\n        </p>\r\n        <DemoComponentApi\r\n          hideApiTitle\r\n          keyText=\"properties\"\r\n          api={[\r\n            {\r\n              api: [\r\n                {\r\n                  propName: \"pageContainerType\",\r\n                  type: `<code>'default'</code>  | <code>'gutterless'</code> | <code>'contained'</code>`,\r\n                  default: `<code>'default'</code>`,\r\n                  desc: \"Type of the view container\",\r\n                },\r\n                {\r\n                  propName: \"header\",\r\n                  type: `<code>string</code>  | <code>object</code>`,\r\n                  default: \"-\",\r\n                  desc: \"View page title or custom element\",\r\n                },\r\n                {\r\n                  propName: \"extraHeader\",\r\n                  type: `<code>string</code>  | <code>object</code>`,\r\n                  default: \"-\",\r\n                  desc: \"Apply a custom element on the opposite of header\",\r\n                },\r\n                {\r\n                  propName: \"footer\",\r\n                  type: `<code>boolean</code>`,\r\n                  default: `<code>true</code>`,\r\n                  desc: \"Whether to display footer\",\r\n                },\r\n                {\r\n                  propName: \"layout\",\r\n                  type: `<code>'blank'</code>  | <code>'classic'</code> | <code>'modern'</code> | <code>'simple'</code> | <code>'decked'</code> | <code>'stackedSide'</code>`,\r\n                  default: `-`,\r\n                  desc: \"Overiding current layout for this page\",\r\n                },\r\n              ],\r\n            },\r\n          ]}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RouteAndNav;\r\n"],"names":["Tr","Table","Th","Td","THead","TBody","hideApiTitle","api","keyText","length","className","map","comp","component","item","propName","ReactHtmlParser","desc","type","default","href","target","rel","id","language"],"sourceRoot":""}